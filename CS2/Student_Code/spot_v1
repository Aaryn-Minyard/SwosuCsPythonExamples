import sys
from dotenv import load_dotenv
import logging
import json
import os
import base64
import tkinter as tk
from tkinter import ttk
import keyboard
import webbrowser
from requests import get, post, put

logging.basicConfig(filename='app.log', level=logging.ERROR)

load_dotenv()

CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")

unique_items = set()
all_items = []

RECENTS_FILE = 'recents.json'

window_open = False 

def log_error(exception):
    logging.error(exception, exc_info=True)

def load_data(filename):
    try:
        with open(filename, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_data(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file)

def get_token():
    if not CLIENT_ID or not CLIENT_SECRET:
        raise ValueError("Missing CLIENT_ID or CLIENT_SECRET in environment variables")
    
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_bytes = auth_string.encode("utf-8")
    auth_base64 = base64.b64encode(auth_bytes).decode("utf-8")
    
    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Authorization": f"Basic {auth_base64}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {"grant_type": "client_credentials"}
    
    try:
        response = post(url, headers=headers, data=data)
        response.raise_for_status()
        token_data = response.json()
        return token_data["access_token"]
    except Exception as e:
        log_error(f"Error fetching token: {e}")
        return None

def get_auth_header(token):
    return {"Authorization": f"Bearer {token}"}

def search_spotify(token, query):
    global unique_items
    unique_items = set()
    
    url = "https://api.spotify.com/v1/search"
    headers = get_auth_header(token)
    query_params = {"q": query, "type": "track,album,artist,playlist", "limit": 10}
    
    try:
        response = get(url, headers=headers, params=query_params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        log_error(f"Error searching on Spotify: {e}")
        return None

def custom_sort_key(item, query):
    global unique_items
    artist_names = '|'.join(artist['name'].lower() for artist in item.get('artists', []))
    item_name_lower = item['name'].lower()
    
    query_lower = query.lower()

    if artist_names == query_lower:
        return (0, item_name_lower)

    if item_name_lower == query_lower:
        return (1, item_name_lower)

    if item.get('type') == 'playlist':
        return (2, item_name_lower, artist_names)
    
    key = f"{item_name_lower}|{artist_names}"
    if key in unique_items:
        return (3, item_name_lower) 
    
    unique_items.add(key)
    relevance = sum(query_part.lower() in item_name_lower for query_part in query_lower.split())
    
    return (4, -relevance, item_name_lower)

def display_results(results, query):
    items = results.get("tracks", {}).get("items", [])
    playlists = results.get("playlists", {}).get("items", [])
    
    if not items and not playlists:
        print("No results found.")
        return
    
    all_items = items + playlists
    all_items.sort(key=lambda item: custom_sort_key(item, query))
    
    all_items = all_items[:10]
    
    for idx, item in enumerate(all_items, 1):
        item_type = item.get("type", "")
        
        if item_type == "playlist":
            playlist_name = item['name']
            owner_name = item['owner']['display_name'] if 'owner' in item else 'Unknown'
            print(f"{idx}. {playlist_name} - {owner_name} ({item_type})")
        else:
            artists = item.get('artists', [])
            artist_names = ', '.join(artist['name'] for artist in artists)
            print(f"{idx}. {item['name']} - {artist_names}")
    
    try:
        selection = int(input("Enter the number of the item you want to select: "))
        if 1 <= selection <= len(all_items):
            save_recent(query)
            return all_items[selection - 1]
        else:
            print("Invalid selection.")
            return None
    except ValueError:
        print("Invalid input. Please enter a number.")
        return None

def save_recent(query):
    recents = load_data(RECENTS_FILE)
    recents.insert(0, query)
    save_data(recents[:10], RECENTS_FILE)

def add_to_queue(track_uri):
    token = get_token()
    
    url = "https://api.spotify.com/v1/me/player/queue"
    headers = get_auth_header(token)
    params = {"uri": track_uri}
    
    try:
        response = post(url, headers=headers, params=params)
        response.raise_for_status()
        print(f"Added to queue: {track_uri}")
    except Exception as e:
        log_error(f"Error adding to queue: {e}")

def start_playlist(playlist_uri):
    token = get_token()
    
    url = f"https://api.spotify.com/v1/me/player/play"
    headers = get_auth_header(token)
    params = {"context_uri": playlist_uri}
    
    try:
        response = put(url, headers=headers, params=params)
        response.raise_for_status()
        print(f"Started playlist: {playlist_uri}")
    except Exception as e:
        log_error(f"Error starting playlist: {e}")

def play_item_in_spotify(item):
    if "type" in item and "uri" in item:
        item_type = item["type"]
        item_uri = item["uri"]
        
        if item_type == "track":
            open_spotify_uri(item_uri)
        elif item_type == "playlist":
            open_spotify_uri(item_uri)
        else:
            print("Cannot open this item type. Please select a track or playlist.")

def open_spotify_uri(uri):
    try:
        webbrowser.open(f"spotify:{uri}")
    except Exception as e:
        log_error(f"Error opening Spotify: {e}")

def close_window():
    global window_open
    root.withdraw()
    window_open = False

def on_window_close():
    close_window()

def create_gui():
    global root, combobox, combobox_recent
    
    root = tk.Tk()
    root.title("Spot")
    root.configure(bg="#191414")
    root.attributes('-topmost', True)
    
    root.protocol("WM_DELETE_WINDOW", on_window_close)
    
    style = ttk.Style()
    style.configure("TEntry", foreground="#1DB954", background="#282828", fieldbackground="#282828", font=("Arial", 14))
    
    label = ttk.Label(root, text="Enter your search query:", background="#191414", foreground="#1DB954", font=("Arial", 14))
    label.pack(pady=20)

    query_entry = ttk.Entry(root, font=("Arial", 14))
    query_entry.pack(padx=20, pady=10)

    search_button = ttk.Button(root, text="Search", command=lambda: update_combobox(query_entry))
    search_button.pack(pady=20)

    combobox = ttk.Combobox(root, font=("Arial", 12), width=50)
    combobox.pack(padx=20, pady=10)
    combobox.bind("<<ComboboxSelected>>", lambda event: on_combobox_select(event, combobox))

    recent_label = ttk.Label(root, text="Recent Searches (Not yet Functioning):", background="#191414", foreground="#1DB954", font=("Arial", 14))
    recent_label.pack(pady=10)

    combobox_recent = ttk.Combobox(root, font=("Arial", 12), width=50)
    combobox_recent.pack(padx=20, pady=10)

    root.withdraw()

def update_combobox(query_entry):
    query = query_entry.get()
    token = get_token()
    results = search_spotify(token, query)
    
    if results:
        items = results.get("tracks", {}).get("items", [])
        playlists = results.get("playlists", {}).get("items", [])
        
        if not items and not playlists:
            print("No results found.")
            return
        
        all_items.clear()
        all_items.extend(items + playlists)
        
        all_items.sort(key=lambda item: custom_sort_key(item, query))
        
        item_names = []
        for item in all_items:
            if item.get("type") == "playlist":
                item_names.append(f"{item['name']} - {item['owner']['display_name']} (Playlist)")
            else:
                artists = ', '.join(artist['name'] for artist in item.get('artists', []))
                item_names.append(f"{item['name']} - {artists}")
        
        combobox["values"] = item_names
        update_recent_combobox()

def update_recent_combobox():
    recent_queries = load_data(RECENTS_FILE)
    combobox_recent["values"] = recent_queries

def on_combobox_select(event, combobox):
    selected_index = combobox.current()
    if selected_index != -1:
        selected_item = all_items[selected_index]
        play_item_in_spotify(selected_item)
        close_window()

def reopen_window():
    global window_open
    if not window_open:
        root.deiconify()
        window_open = True

if __name__ == "__main__":
    create_gui()
    toggle_shortcut = "cttl+shift+\\"
    keyboard.add_hotkey(toggle_shortcut, reopen_window)
    root.mainloop()
