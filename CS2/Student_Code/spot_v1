from dotenv import load_dotenv
import os
import base64
from requests import get, post
import webbrowser
import time
import psutil


load_dotenv()


CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")


unique_items = set()


def get_token():
    if not CLIENT_ID or not CLIENT_SECRET:
        raise ValueError("Missing CLIENT_ID or CLIENT_SECRET in environment variables")
   
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_bytes = auth_string.encode("utf-8")
    auth_base64 = base64.b64encode(auth_bytes).decode("utf-8")
   
    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Authorization": f"Basic {auth_base64}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {"grant_type": "client_credentials"}
   
    try:
        response = post(url, headers=headers, data=data)
        response.raise_for_status()
        token_data = response.json()
        return token_data["access_token"]
    except Exception as e:
        print(f"Error fetching token: {e}")
        return None


def get_auth_header(token):
    return {"Authorization": f"Bearer {token}"}


def search_spotify(token, query):
    global unique_items
    unique_items = set()
   
    url = "https://api.spotify.com/v1/search"
    headers = get_auth_header(token)
    query_params = {"q": query, "type": "track,album,artist,playlist", "limit": 10}
   
    try:
        response = get(url, headers=headers, params=query_params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error searching on Spotify: {e}")
        return None


def custom_sort_key(item):
    global unique_items
    artist_names = '|'.join(artist['name'].lower() for artist in item.get('artists', []))
    item_name_lower = item['name'].lower()
   
    # Prioritize items where the artist's name exactly matches the search query
    if artist_names == query.lower():
        return (0, item_name_lower)  # Highest priority
   
    # Prioritize items that have the same name as the search query
    if item_name_lower == query.lower():
        return (1, item_name_lower)  # Second highest priority
   
    # Prioritize playlists
    if item.get('type') == 'playlist':
        return (2, item_name_lower)  # Third highest priority
   
    # Filter out duplicate songs by the same artist
    key = f"{item_name_lower}|{artist_names}"
    if key in unique_items:
        return (3, item_name_lower)  # Fourth priority
   
    unique_items.add(key)
   
    # Calculate relevance score based on the presence of query parts in the item name
    relevance = sum(query_part.lower() in item_name_lower for query_part in query.split())
   
    return (4, -relevance, item_name_lower)  # Lowest priority, negative relevance for descending order


def display_results(results, query):
    items = results.get("tracks", {}).get("items", [])
    playlists = results.get("playlists", {}).get("items", [])
   
    if not items and not playlists:
        print("No results found.")
        return
   
    all_items = items + playlists
    all_items.sort(key=custom_sort_key)
   
    all_items = all_items[:10]
   
    for idx, item in enumerate(all_items, 1):
        item_type = item.get("type", "")
       
        if item_type == "playlist":
            playlist_name = item['name']
            owner_name = item['owner']['display_name'] if 'owner' in item else 'Unknown'
            print(f"{idx}. {playlist_name} - {owner_name} ({item_type})")
        else:
            artists = item.get('artists', [])
            artist_names = ', '.join(artist['name'] for artist in artists)
            print(f"{idx}. {item['name']} - {artist_names}")
   
    try:
        selection = int(input("Enter the number of the item you want to select: "))
        if 1 <= selection <= len(all_items):
            return all_items[selection - 1]
        else:
            print("Invalid selection.")
            return None
    except ValueError:
        print("Invalid input. Please enter a number.")
        return None


def play_item_in_spotify(item):
    if "type" in item and "id" in item:
        item_type = item["type"]
        item_id = item["id"]
       
        if item_type == "track":
            spotify_uri = f"spotify:track:{item_id}"
        elif item_type == "playlist":
            spotify_uri = f"spotify:playlist:{item_id.split(':')[-1]}"
       
        try:
            webbrowser.open(spotify_uri)
           
            # Wait for Spotify to open
            time.sleep(20)
           
            # Check if Spotify is running and keep it open
            while is_spotify_running():
                time.sleep(5)
        except Exception as e:
            print(f"Error playing item in Spotify: {e}")


def is_spotify_running():
    for process in psutil.process_iter(['pid', 'name']):
        if 'Spotify' in process.info['name']:
            return True
    return False


if __name__ == "__main__":
    token = get_token()
   
    if token:
        query = input("Enter your search query: ")
       
        results = search_spotify(token, query)
       
        if results:
            selected_item = display_results(results, query)
            if selected_item:
                play_item_in_spotify(selected_item)
